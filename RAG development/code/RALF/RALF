import time
from datetime import datetime, timezone
import gradio

from lib.RAGManager import RAGManager
from lib.Config import Config
from lib.Logger import Logger

class App:
    """Gradio application for the RAG pretest."""

    def __init__(self):
        self.config = Config()
        self.rag_manager = RAGManager(self.config)
        self.logger = Logger(self.config.LOG_PATH)

    def gradio_interface(self, pdf_files_list_from_gradio, query):
        """Gradio interface function."""
        t_start = time.perf_counter()

        if not pdf_files_list_from_gradio:
            return "Please upload at least one PDF file.", "No PDFs uploaded."

        result, full_log, retrieved_chunks = self.rag_manager.process_and_query(pdf_files_list_from_gradio, query)

        total_time = time.perf_counter() - t_start
        full_log += f"\n=== RAG runtime ===\nTotal: {total_time:.3f} seconds\n"

        result_with_time = f"(Generated in {total_time:.2f}s)\n\n{result}"
        self.logger.append_log_entry_csv({
            "timestamp_utc": datetime.now(timezone.utc).isoformat(),
            "query": query,
            "answer": result_with_time,
            "processing_log": full_log,
            "retrieved_chunks": " || ".join(retrieved_chunks)
        })

        return result_with_time, full_log

    def launch(self):
        """Launches the Gradio interface."""
        iface = gradio.Interface(
            fn=self.gradio_interface,
            inputs=[
                gradio.File(label="Upload PDFs", file_count="multiple"),
                gradio.Textbox(label="Enter your question")
            ],
            outputs=[
                gradio.Textbox(label="Answer"),
                gradio.Textbox(label="Processing Log")
            ],
            title="RAG Pretest (Multiple PDFs)",
            description="Langchain+Chatgpt4omini Pretest UI for WELL Certification with multi-PDF support."
        )
        iface.launch()


def main():
    """Main function to launch the application."""
    app = App()
    app.launch()

if __name__ == "__main__":
    main()