# Spearman correlations (ρ) with p-values AND bootstrap 95% CIs (percentile)
import pandas as pd
import numpy as np
from itertools import combinations
from scipy import stats
from pathlib import Path

# --- Load ---
df = pd.read_csv("data/results.csv")

# --- Standardize column names (only those present will be renamed) ---
rename_map = {
    "Question N": "question_id",
    "Answer_ID": "answer_id",
    "AI Model": "model",
    "Task": "task_label",
    "Specificity": "specific_abstract",
    "Specific/ Abstract": "specific_abstract",
    "Single-Hop/Multi-Hop": "hop_label",
    "Automated_Evaluation_Response Relevancy": "ragas_response_relevancy",
    "Automated_Evaluation_Answer Correctness": "ragas_answer_correctness",
    "Automated_Evaluation_Relevance Rubric": "relevance_rubric",
    "Automated_Evaluation_Accuracy Rubric": "accuracy_rubric",
    "HB_Accuracy": "hb_accuracy",
}
df = df.rename(columns={k: v for k, v in rename_map.items() if k in df.columns})

# --- Ensure required columns exist and are numeric ---
cols = ["ragas_answer_correctness", "accuracy_rubric", "hb_accuracy"]
missing = [c for c in cols if c not in df.columns]
if missing:
    raise ValueError(f"Missing required columns in results.csv: {missing}")

for c in cols:
    df[c] = pd.to_numeric(df[c], errors="coerce")

# Drop rows with any missing among the three columns
work = df.dropna(subset=cols).copy()

# -------------------------
# Bootstrap Spearman helper
# -------------------------
def spearman_with_bootstrap(x, y, B=10000, seed=12345, alpha=0.05):
    """
    Compute Spearman's rho, p-value, and bootstrap (percentile) CI.
    Resamples paired rows with replacement.
    """
    x = np.asarray(x, dtype=float)
    y = np.asarray(y, dtype=float)
    # Remove NaNs pairwise
    m = np.isfinite(x) & np.isfinite(y)
    x, y = x[m], y[m]
    n = len(x)

    if n < 3:
        return dict(n=n, rho=np.nan, p_value=np.nan,
                    boot_mean=np.nan, ci_lo=np.nan, ci_hi=np.nan)

    # Point estimate and p-value
    rho, p = stats.spearmanr(x, y)

    # Bootstrap
    rng = np.random.default_rng(seed)
    boots = []
    for _ in range(B):
        idx = rng.integers(0, n, n)  # resample paired rows
        xb = x[idx]
        yb = y[idx]
        r, _ = stats.spearmanr(xb, yb)
        # Handle degenerate samples (constant ranks → nan)
        if np.isfinite(r):
            boots.append(r)

    if len(boots) < max(200, int(0.5 * B)):  # too many degenerate resamples → unreliable CI
        boot_mean = np.nan
        lo = np.nan
        hi = np.nan
    else:
        boots = np.asarray(boots)
        boot_mean = float(np.mean(boots))
        lo, hi = np.quantile(boots, [alpha/2, 1 - alpha/2])
        lo = float(lo); hi = float(hi)

    return dict(n=n, rho=float(rho), p_value=float(p),
                boot_mean=boot_mean, ci_lo=lo, ci_hi=hi)

# -------------------------
# Compute for all pairs
# -------------------------
from itertools import combinations

def spearman_pairs_with_bootstrap(data, columns, group_col=None, B=10000, seed=12345):
    pairs = list(combinations(columns, 2))
    rows = []
    if group_col is None:
        for x, y in pairs:
            res = spearman_with_bootstrap(data[x], data[y], B=B, seed=seed)
            rows.append({"group": "ALL", "var_x": x, "var_y": y, **res})
    else:
        for g, gdf in data.groupby(group_col, dropna=False):
            for x, y in pairs:
                res = spearman_with_bootstrap(gdf[x], gdf[y], B=B, seed=seed)
                rows.append({"group": g, "var_x": x, "var_y": y, **res})
    return pd.DataFrame(rows).sort_values(["group", "var_x", "var_y"]).reset_index(drop=True)

# --- Overall (all data) ---
overall = spearman_pairs_with_bootstrap(work, cols, group_col=None, B=10000, seed=42)

# --- Per-model breakdown (optional) ---
if "model" in work.columns:
    by_model = spearman_pairs_with_bootstrap(work, cols, group_col="model", B=10000, seed=42)
else:
    by_model = pd.DataFrame(columns=["group","var_x","var_y","n","rho","p_value","boot_mean","ci_lo","ci_hi"])

# --- Nicely print and save ---
pd.options.display.float_format = "{:.3f}".format
print("\n=== Spearman correlations with bootstrap 95% CI (ALL data) ===")
print(overall)

if len(by_model):
    print("\n=== Spearman correlations with bootstrap 95% CI (by model) ===")
    print(by_model)

OUT = Path("tables"); OUT.mkdir(exist_ok=True, parents=True)
overall.to_csv(OUT / "spearman_overall_bootstrap.csv", index=False)
by_model.to_csv(OUT / "spearman_by_model_bootstrap.csv", index=False)


